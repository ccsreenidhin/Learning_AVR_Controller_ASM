
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c5  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fa  00000000  00000000  00000425  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f9  00000000  00000000  0000051f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b3  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002b  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  b6:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <lcd_command>:
}
while(1);
}
void lcd_command(int v)
{
PORTC&=~(1<<PC0);
  be:	a8 98       	cbi	0x15, 0	; 21
PORTC&=~(1<<PC1);
  c0:	a9 98       	cbi	0x15, 1	; 21
PORTA=v;
  c2:	8b bb       	out	0x1b, r24	; 27
PORTC|=(1<<PC2);
  c4:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	9e e4       	ldi	r25, 0x4E	; 78
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_command+0xc>
_delay_ms(20);
PORTC&=~(1<<PC2);
  ce:	aa 98       	cbi	0x15, 2	; 21
}
  d0:	08 95       	ret

000000d2 <lcd_data>:

void lcd_data(char f)
{
PORTC|=(1<<PC0);
  d2:	a8 9a       	sbi	0x15, 0	; 21
PORTC&=~(1<<PC1);
  d4:	a9 98       	cbi	0x15, 1	; 21
PORTA=f;
  d6:	8b bb       	out	0x1b, r24	; 27
PORTC|=(1<<PC2);
  d8:	aa 9a       	sbi	0x15, 2	; 21
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	9e e4       	ldi	r25, 0x4E	; 78
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_data+0xc>
_delay_ms(20);
PORTC&=~(1<<PC2);
  e2:	aa 98       	cbi	0x15, 2	; 21
}
  e4:	08 95       	ret

000000e6 <main>:
#include"avr\io.h"
#include"util\delay.h"
void lcd_command(int v);
void lcd_data(char);
void main()
{
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	64 97       	sbiw	r28, 0x14	; 20
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
int i;
char a[10]={0x38,0X06,0x0C,0x80};
 102:	fe 01       	movw	r30, r28
 104:	31 96       	adiw	r30, 0x01	; 1
 106:	8a e0       	ldi	r24, 0x0A	; 10
 108:	df 01       	movw	r26, r30
 10a:	1d 92       	st	X+, r1
 10c:	8a 95       	dec	r24
 10e:	e9 f7       	brne	.-6      	; 0x10a <main+0x24>
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	8a 83       	std	Y+2, r24	; 0x02
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	8b 83       	std	Y+3, r24	; 0x03
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	8c 83       	std	Y+4, r24	; 0x04
char b[10]={"HELLO"};
 120:	de 01       	movw	r26, r28
 122:	1b 96       	adiw	r26, 0x0b	; 11
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	01 90       	ld	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x44>
 132:	19 8a       	std	Y+17, r1	; 0x11
 134:	1a 8a       	std	Y+18, r1	; 0x12
 136:	1b 8a       	std	Y+19, r1	; 0x13
 138:	1c 8a       	std	Y+20, r1	; 0x14
DDRC=0XFF;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	84 bb       	out	0x14, r24	; 20
DDRA=0xff;
 13e:	8a bb       	out	0x1a, r24	; 26
DDRB=0XFF;
 140:	87 bb       	out	0x17, r24	; 23
 142:	8e 01       	movw	r16, r28
 144:	0f 5f       	subi	r16, 0xFF	; 255
 146:	1f 4f       	sbci	r17, 0xFF	; 255

for(i=0;i<=4;i++)
 148:	96 e0       	ldi	r25, 0x06	; 6
 14a:	e9 2e       	mov	r14, r25
 14c:	f1 2c       	mov	r15, r1
 14e:	ec 0e       	add	r14, r28
 150:	fd 1e       	adc	r15, r29
 {
 lcd_command (a[i]);
 152:	f8 01       	movw	r30, r16
 154:	81 91       	ld	r24, Z+
 156:	8f 01       	movw	r16, r30
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_command>
char b[10]={"HELLO"};
DDRC=0XFF;
DDRA=0xff;
DDRB=0XFF;

for(i=0;i<=4;i++)
 15e:	0e 15       	cp	r16, r14
 160:	1f 05       	cpc	r17, r15
 162:	b9 f7       	brne	.-18     	; 0x152 <main+0x6c>
 164:	8e 01       	movw	r16, r28
 166:	05 5f       	subi	r16, 0xF5	; 245
 168:	1f 4f       	sbci	r17, 0xFF	; 255
 {
 lcd_command (a[i]);
 }
for(i=0;i<=6;i++)
 16a:	82 e1       	ldi	r24, 0x12	; 18
 16c:	e8 2e       	mov	r14, r24
 16e:	f1 2c       	mov	r15, r1
 170:	ec 0e       	add	r14, r28
 172:	fd 1e       	adc	r15, r29
 {
lcd_data(b[i]);
 174:	d8 01       	movw	r26, r16
 176:	8d 91       	ld	r24, X+
 178:	8d 01       	movw	r16, r26
 17a:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_data>

for(i=0;i<=4;i++)
 {
 lcd_command (a[i]);
 }
for(i=0;i<=6;i++)
 17e:	0e 15       	cp	r16, r14
 180:	1f 05       	cpc	r17, r15
 182:	c1 f7       	brne	.-16     	; 0x174 <main+0x8e>
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x9e>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
